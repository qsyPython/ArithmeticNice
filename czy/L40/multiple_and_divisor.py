#求2个数的最小公倍数 和 最大公约数

# 一、
# 求最小公倍数算法：
#
# 最小公倍数=两整数的乘积÷最大公约数
#
# 求最大公约数算法：
#
# (1)辗转相除法
#
# 有两整数a和b：
#
# ① a%b得余数c
#
# ② 若c=0，则b即为两数的最大公约数
#
# ③ 若c≠0，则a=b，b=c，再回去执行①
#
# 例如求27和15的最大公约数过程为：
#
# 27÷15 余1215÷12余312÷3余0因此，3即为最大公约数

#一、辗转相除法求最大公约数
# def divisor(a,b):
#     m = a
#     n = b
#     while(b != 0):
#         c = a%b
#         a = b
#         b = c
#     return a
#
# #a,b 整数 d 最大公约数
def multiple(a,b,d):
    return int(a*b/d)
#二、⑵ 相减法
# 有两整数a和b：
#
# ① 若a>b，则a=a-b
#
# ② 若a<b，则b=b-a
#
# ③ 若a=b，则a（或b）即为两数的最大公约数
#
# ④ 若a≠b，则再回去执行①
#
# 例如求27和15的最大公约数过程为：
#
# 27－15＝12( 15>12 ) 15－12＝3( 12>3 )
#
# 12－3＝9( 9>3 ) 9－3＝6( 6>3 )
#
# 6－3＝3( 3==3 )
#
# 因此，3即为最大公约数

# def divisor(a,b):
#     m = a
#     n = b
#     while(b != a):
#         if a > b:
#             a = a - b
#         else:
#             b = b - a
#     return a

# ⑶穷举法
#
# 有两整数a和b：
#
# ① i=1
#
# ② 若a，b能同时被i整除，则t＝i
#
# ③ i++
#
# ④ 若 i <= a(或b)，则再回去执行②
#
# ⑤ 若 i > a(或b)，则t即为最大公约数，结束
#
# 改进：
#
# ① i= a(或b)
#
# ② 若a，b能同时被i整除，则i即为最大公约数，
#
# 结束
#
# ③ i--，再回去执行②
#
# 有两整数a和b：
#
# ① i=1
#
# ② 若a，b能同时被i整除，则t＝i
#
# ③ i++
#
# ④ 若 i <= a(或b)，则再回去执行②
#
# ⑤ 若 i > a(或b)，则t即为最大公约数，结束
#
# 改进：
#
# ① i= a(或b)
#
# ② 若a，b能同时被i整除，则i即为最大公约数，
#
# 结束
#
# ③ i--，再回去执行②

# def divisor(a,b):
#     m = a
#     n = b
#     i = 1
#     t = 0
#     while i <= a:
#         if a%i == 0 and b%i == 0:
#            t = i
#         i += 1
#     return t
#改进后
def divisor(a,b):
    m = a
    n = b
    i = 1
    t = a
    while t > 0:
        if a%t == 0 and b%t == 0:
           break
        t -= 1
    return t


if __name__ == '__main__':
   print(divisor(27,15))
   print(multiple(27,15,divisor(27,15)))


