'''
iOS最实用的13种设计模式
设计模式：是1种解决问题的思维，通过设计模式达到可复用、可拓展，尽量实现高内聚低耦合。
'''

# 1、单例 模式：
#   1、定义: 创建1个一直会存在的实例，一次创建，后续可直接使用

# 2、MVC：模型(model)－视图(view)－控制器(controller)，用一种业务逻辑、数据、界面显示分离的方法组织代码。
# 3、MVVM：模型(model)－视图(view、Controller)－VM(数据与模型)
# 4、观察者: kvo等，是检测对象属性变化，进行通知处理
# 5、代理：数据回调处理
# 6、工厂：根据传入的参数,动态决定创建类的实例

# 7、适配器
    # 1、定义：适配器模式将一个类的接口适配成用户所期待的
    # 2、使用场景：
    # 当你想使用一个已经存在的类，而它的接口不符合你的需求；
    # 你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类协同工作；
    # 你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口，对象适配器可以适配它的父亲接口

    # 3、优缺点：降低数据层和视图层（对象）的耦合度，使之使用更加广泛；适应复杂多变的变化
    # 缺点：可读性差；代码量增加
# 踩坑：
# .h中实现@property jitein时，本质上：变量 + setter + getter。处理这么多就会报错，.m中不可以同时重写setter和getter。若同时重写，系统不会帮你自动生成这个成员变量！
# 只能实现1个setter和getter方法； 系统会生成自动变量。
# 使用@synthesize name = _name;  可以同时重写setter和getter。系统会自动生成变量。
#
# 使用@dynamic name; 可以同时重写setter和getter方法。系统也没自动生成变量：可使用objc——runtime绑定方法
# 类别创建属性。

# 8、策略

# 9、原型/外观
# 10、装饰
# 11、桥接：Bridge，webview 和 h5 交互
# 12、备忘录
# 13、生成器：给定一些数据或方法，生成对应的容器或常用类
# 14、命令
# 15、原型：
